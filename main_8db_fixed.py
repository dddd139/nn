import logging
import os
import csv
import socket
import dns.resolver
import aiohttp
import phonenumbers
import sqlite3
import asyncio
import httpx
from phonenumbers import geocoder, carrier
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN", "")
IPINFO_TOKEN = os.getenv("IPINFO_TOKEN", "")
HUNTER_API_KEY = os.getenv("HUNTER_API_KEY", "")
DB_PATH = "data.db"
USE_FTS = os.getenv("USE_FTS", "false").lower() == "true"  # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞

if not TOKEN:
    raise RuntimeError("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states: dict[int, str] = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å Google Drive ---

def _get_confirm_token(response):
    for key, value in response.cookies.items():
        if key.startswith('download_warning'):
            return value
    return None

def _save_response_content(response, destination):
    CHUNK_SIZE = 32768
    with open(destination, "wb") as f:
        for chunk in response.iter_content(CHUNK_SIZE):
            if chunk:
                f.write(chunk)

def download_file_from_google_drive(file_id: str, destination: str):
    URL = "https://docs.google.com/uc?export=download"
    session = httpx.Client(follow_redirects=False)
    response = session.get(URL, params={'id': file_id})
    token = _get_confirm_token(response)
    if token:
        params = {'id': file_id, 'confirm': token}
        response = session.get(URL, params=params, stream=True)
    else:
        response = session.get(URL, params={'id': file_id}, stream=True)
    if response.status_code == 200:
        _save_response_content(response, destination)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {destination}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {destination}, —Å—Ç–∞—Ç—É—Å {response.status_code}")

def ensure_database(file_id, file_path):
    if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
        logger.info(f"–§–∞–π–ª {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∂–∞—é —Å Google Drive...")
        download_file_from_google_drive(file_id, file_path)
    else:
        logger.info(f"–§–∞–π–ª {file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É.")

def download_databases():
    file_ids = [
        "1Tp7iudab37rOCo38clxZo6fLktwky95_",
        "1uPdPWWXtCxObqqbjwLThU6MaWd-6n7W_",
        "1fnLM68dxLI5vvjFXudoUVfO8DTWVjbuT",
        "1BTYgZt4r9bKwz-40TNW_ZUSXW0itU8GG",
        "1thFi5HoJWIITSxHb-Gl2MnX4pnBVSM0a",
        "13Q1VdW1Uz8JBjBT7WJUdjvMlubmq-_4w",
        "15k3vKPmIoQshsg9WOYaMBFZsgq8rDggc",
        "1lsYEZ5iBpsuop0BtsdwqmXbe8lmN5PR9",
    ]
    for idx, file_id in enumerate(file_ids, start=1):
        path = f"data{idx}.db"
        try:
            ensure_database(file_id, path)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {path}: {e}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π data.db
    main_file_id = "1uSMpNJRQJqVziNmVANI7oBG8IyrZguCa"
    try:
        ensure_database(main_file_id, DB_PATH)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {DB_PATH}: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = "FTS5" if USE_FTS else "–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL"
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø OSINT-–±–æ—Ç. –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: {mode}\n\n"
        "/phone ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "/ip ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP\n"
        "/domain ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ\n"
        "/email ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ email —á–µ—Ä–µ–∑ Hunter.io\n"
        "/telegram ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram username\n"
        "/searchdb ‚Äî –ø–æ–∏—Å–∫ –ø–æ SQLite-–±–∞–∑–µ"
    )

async def cmd_generic(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str, prompt: str):
    user_states[update.effective_user.id] = state
    await update.message.reply_text(prompt)

async def cmd_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_phone", "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

async def cmd_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_ip", "üåç –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å:")

async def cmd_domain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_domain", "üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω:")

async def cmd_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_email", "üìß –í–≤–µ–¥–∏—Ç–µ email:")

async def cmd_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_telegram", "üîç –í–≤–µ–¥–∏—Ç–µ Telegram username (@user):")

async def cmd_searchdb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = "awaiting_dbsearch"
    await update.message.reply_text("üîé –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ:")

# --- –û–±—ã—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL-–ø–æ–∏—Å–∫ ---
async def search_with_index(query: str) -> list[str]:
    if not os.path.exists(DB_PATH):
        return ["‚ùå –ë–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
    results = []
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT phone, email, name FROM users
            WHERE phone LIKE ? OR email LIKE ? OR name LIKE ?
            LIMIT 10
        """, (f"{query}%", f"{query}%", f"{query}%"))
        rows = cursor.fetchall()
        for phone, email, name in rows:
            results.append(f"üìû {phone} | üìß {email} | üë§ {name}")
        conn.close()
    except Exception as e:
        results.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    return results or ["‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"]

# --- –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ FTS5 ---
async def search_with_fts(query: str) -> list[str]:
    results = []
    for i in range(1, 9):
        db_path = f"data{i}.db"
        if not os.path.exists(db_path):
            results.append(f"‚ö†Ô∏è {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT phone, email, name FROM users_fts
                WHERE users_fts MATCH ?
                LIMIT 10
            """, (query,))
            rows = cursor.fetchall()
            for phone, email, name in rows:
                results.append(f"üìÅ data{i}.db ‚Üí üìû {phone} | üìß {email} | üë§ {name}")
            conn.close()
        except Exception as e:
            results.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ data{i}.db: {e}")
    return results or ["‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"]

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = user_states.pop(update.effective_user.id, "")
    text = update.message.text.strip()
    try:
        if state == "awaiting_phone":
            num = phonenumbers.parse(text, None)
            await update.message.reply_text(f"üìû –°—Ç—Ä–∞–Ω–∞: {geocoder.description_for_number(num, 'en')}\nüì° –û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier.name_for_number(num, 'en')}")
        elif state == "awaiting_ip":
            async with aiohttp.ClientSession() as s:
                async with s.get(f"https://ipinfo.io/{text}?token={IPINFO_TOKEN}") as r:
                    data = await r.json()
            await update.message.reply_text("\n".join(f"{k}: {v}" for k, v in data.items()))
        elif state == "awaiting_domain":
            ip = socket.gethostbyname(text)
            ns = dns.resolver.resolve(text, 'NS')
            await update.message.reply_text(f"üåê {text} ‚Üí IP: {ip}\nNS: {', '.join(str(r.target) for r in ns)}")
        elif state == "awaiting_email":
            async with aiohttp.ClientSession() as s:
                async with s.get(f"https://api.hunter.io/v2/email-verifier?email={text}&api_key={HUNTER_API_KEY}") as r:
                    data = await r.json()
            result = data.get("data", {})
            await update.message.reply_text("\n".join(f"{k}: {v}" for k, v in result.items()))
        elif state == "awaiting_telegram":
            await update.message.reply_text(f"https://t.me/{text.lstrip('@')}")
        elif state == "awaiting_dbsearch":
            results = await search_with_fts(text) if USE_FTS else await search_with_index(text)
            for r in results:
                await update.message.reply_text(r)
        else:
            await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    await app.bot.delete_webhook(drop_pending_updates=True)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("phone", cmd_phone))
    app.add_handler(CommandHandler("ip", cmd_ip))
    app.add_handler(CommandHandler("domain", cmd_domain))
    app.add_handler(CommandHandler("email", cmd_email))
    app.add_handler(CommandHandler("telegram", cmd_telegram))
    app.add_handler(CommandHandler("searchdb", cmd_searchdb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("‚úÖ OSINT-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    download_databases()  # –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    asyncio.get_event_loop().run_until_complete(main())
