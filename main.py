import logging
import os
import csv
import socket
import dns.resolver
import aiohttp
import phonenumbers
from phonenumbers import geocoder, carrier

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TOKEN", "")
IPINFO_TOKEN = os.getenv("IPINFO_TOKEN", "")
HUNTER_API_KEY = os.getenv("HUNTER_API_KEY", "")
HIBP_API_KEY = os.getenv("HIBP_API_KEY", "")
CSV_FOLDER = "csv_data"

if not TOKEN:
    raise RuntimeError("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_states: dict[int, str] = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø OSINT-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/phone ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "/ip ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP\n"
        "/domain ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ\n"
        "/email ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ email —á–µ—Ä–µ–∑ Hunter.io\n"
        "/telegram ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å Telegram\n"
        "/searchcsv ‚Äî –ø–æ–∏—Å–∫ –ø–æ CSV\n"
        "/listcsv ‚Äî —Å–ø–∏—Å–æ–∫ CSV-—Ñ–∞–π–ª–æ–≤"
    )

async def cmd_generic(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str, prompt: str):
    user_states[update.effective_user.id] = state
    await update.message.reply_text(prompt)

async def cmd_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_phone", "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

async def cmd_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_ip", "üåç –í–≤–µ–¥–∏—Ç–µ IP:")

async def cmd_domain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_domain", "üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω:")

async def cmd_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_email", "üìß –í–≤–µ–¥–∏—Ç–µ email:")

async def cmd_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_telegram", "üîç –í–≤–µ–¥–∏—Ç–µ Telegram username (@user):")

async def cmd_searchcsv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_generic(update, context, "awaiting_csv", "üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ CSV:")

async def cmd_listcsv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        files = [f for f in os.listdir(CSV_FOLDER) if f.endswith(".csv")]
        msg = "üìÅ CSV-—Ñ–∞–π–ª—ã:\n" + "\n".join(files) if files else "‚ùå –ù–µ—Ç CSV-—Ñ–∞–π–ª–æ–≤."
    except FileNotFoundError:
        msg = "‚ùå –ü–∞–ø–∫–∞ csv_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    await update.message.reply_text(msg)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = user_states.pop(update.effective_user.id, "")
    text = update.message.text.strip()

    try:
        if state == "awaiting_phone":
            num = phonenumbers.parse(text, None)
            country = geocoder.description_for_number(num, "en")
            operator = carrier.name_for_number(num, "en")
            await update.message.reply_text(f"üìû –°—Ç—Ä–∞–Ω–∞: {country}\nüì° –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}")

        elif state == "awaiting_ip":
            url = f"https://ipinfo.io/{text}?token={IPINFO_TOKEN}"
            async with aiohttp.ClientSession() as sess:
                resp = await sess.get(url)
                data = await resp.json()
            await update.message.reply_text("\n".join(f"{k}: {v}" for k, v in data.items()))

        elif state == "awaiting_domain":
            ip = socket.gethostbyname(text)
            answers = dns.resolver.resolve(text, 'NS')
            ns = ", ".join(str(r.target) for r in answers)
            await update.message.reply_text(f"üåê {text} ‚Üí IP: {ip}\nNS: {ns}")

        elif state == "awaiting_email":
            url = f"https://api.hunter.io/v2/email-verifier?email={text}&api_key={HUNTER_API_KEY}"
            async with aiohttp.ClientSession() as sess:
                resp = await sess.get(url)
                data = await resp.json()
            result = data.get("data", {})
            await update.message.reply_text("\n".join(f"{k}: {v}" for k, v in result.items()))

        elif state == "awaiting_telegram":
            user = text.lstrip("@")
            await update.message.reply_text(f"https://t.me/{user}")

        elif state == "awaiting_csv":
            results = search_in_csv(text)
            for r in results:
                await update.message.reply_text(r)
        else:
            await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /phone, /ip, ...")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def search_in_csv(keyword: str) -> list[str]:
    results = []
    if not os.path.exists(CSV_FOLDER):
        return ["‚ùå –ü–∞–ø–∫–∏ csv_data –Ω–µ—Ç"]
    for file in os.listdir(CSV_FOLDER):
        if not file.endswith(".csv"):
            continue
        path = os.path.join(CSV_FOLDER, file)
        try:
            with open(path, encoding="utf-8", errors="ignore") as fi:
                for r in csv.reader(fi):
                    if any(keyword.lower() in str(c).lower() for c in r):
                        results.append(f"[{file}] {' | '.join(r)}")
                        if len(results) >= 20:
                            return results
        except:
            results.append(f"[{file}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
    return results or ["‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("phone", cmd_phone))
    app.add_handler(CommandHandler("ip", cmd_ip))
    app.add_handler(CommandHandler("domain", cmd_domain))
    app.add_handler(CommandHandler("email", cmd_email))
    app.add_handler(CommandHandler("telegram", cmd_telegram))
    app.add_handler(CommandHandler("searchcsv", cmd_searchcsv))
    app.add_handler(CommandHandler("listcsv", cmd_listcsv))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ OSINT-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
